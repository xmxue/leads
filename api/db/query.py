# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: query.sql
import dataclasses
import datetime
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from db import models


INSERT_LEAD = """-- name: insert_lead \\:one
INSERT INTO lead (first_name, last_name, email, phone, stage) VALUES (:p1, :p2, :p3, :p4, :p5) RETURNING id, first_name, last_name, email, phone, stage, created_at
"""


@dataclasses.dataclass()
class InsertLeadParams:
    first_name: Optional[str]
    last_name: Optional[str]
    email: Optional[str]
    phone: Optional[str]
    stage: int


LIST_LEADS = """-- name: list_leads \\:many
SELECT first_name, last_name FROM lead where stage = :p1 AND created_at > :p2 AND created_at < :p3 AND first_name LIKE :p4 AND last_name LIKE :p5
"""


@dataclasses.dataclass()
class ListLeadsParams:
    stage: int
    created_at_start: Optional[datetime.datetime]
    created_at_end: Optional[datetime.datetime]
    first_name: Optional[str]
    last_name: Optional[str]


@dataclasses.dataclass()
class ListLeadsRow:
    first_name: Optional[str]
    last_name: Optional[str]


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def insert_lead(self, arg: InsertLeadParams) -> Optional[models.Lead]:
        row = self._conn.execute(sqlalchemy.text(INSERT_LEAD), {
            "p1": arg.first_name,
            "p2": arg.last_name,
            "p3": arg.email,
            "p4": arg.phone,
            "p5": arg.stage,
        }).first()
        if row is None:
            return None
        return models.Lead(
            id=row[0],
            first_name=row[1],
            last_name=row[2],
            email=row[3],
            phone=row[4],
            stage=row[5],
            created_at=row[6],
        )

    def list_leads(self, arg: ListLeadsParams) -> Iterator[ListLeadsRow]:
        result = self._conn.execute(sqlalchemy.text(LIST_LEADS), {
            "p1": arg.stage,
            "p2": arg.created_at_start,
            "p3": arg.created_at_end,
            "p4": arg.first_name,
            "p5": arg.last_name,
        })
        for row in result:
            yield ListLeadsRow(
                first_name=row[0],
                last_name=row[1],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def insert_lead(self, arg: InsertLeadParams) -> Optional[models.Lead]:
        row = (await self._conn.execute(sqlalchemy.text(INSERT_LEAD), {
            "p1": arg.first_name,
            "p2": arg.last_name,
            "p3": arg.email,
            "p4": arg.phone,
            "p5": arg.stage,
        })).first()
        if row is None:
            return None
        return models.Lead(
            id=row[0],
            first_name=row[1],
            last_name=row[2],
            email=row[3],
            phone=row[4],
            stage=row[5],
            created_at=row[6],
        )

    async def list_leads(self, arg: ListLeadsParams) -> AsyncIterator[ListLeadsRow]:
        result = await self._conn.stream(sqlalchemy.text(LIST_LEADS), {
            "p1": arg.stage,
            "p2": arg.created_at_start,
            "p3": arg.created_at_end,
            "p4": arg.first_name,
            "p5": arg.last_name,
        })
        async for row in result:
            yield ListLeadsRow(
                first_name=row[0],
                last_name=row[1],
            )
