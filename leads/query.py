# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: query.sql
import dataclasses
import datetime
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from leads import models


LIST_LEADS = """-- name: list_leads \\:many
SELECT first_name, last_name FROM lead where stage = :p1 AND created_at > :p2 ORDER BY created_at DESC
"""


@dataclasses.dataclass()
class ListLeadsRow:
    first_name: Optional[str]
    last_name: Optional[str]


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def list_leads(self, *, stage: int, created_at: Optional[datetime.datetime]) -> Iterator[ListLeadsRow]:
        result = self._conn.execute(sqlalchemy.text(LIST_LEADS), {"p1": stage, "p2": created_at})
        for row in result:
            yield ListLeadsRow(
                first_name=row[0],
                last_name=row[1],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def list_leads(self, *, stage: int, created_at: Optional[datetime.datetime]) -> AsyncIterator[ListLeadsRow]:
        result = await self._conn.stream(sqlalchemy.text(LIST_LEADS), {"p1": stage, "p2": created_at})
        async for row in result:
            yield ListLeadsRow(
                first_name=row[0],
                last_name=row[1],
            )
